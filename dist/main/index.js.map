{"version":3,"file":"index.js","mappings":";;;;;;;;;AAAA,WAAW,mBAAO,CAAC,kBAAM;AACzB,YAAY,iEAA8B;AAC1C,YAAY,mBAAO,CAAC,uFAAO;AAC3B,UAAU,qDAAuB;;AAEjC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;;AAEA,UAAU,+HAAmC;AAC7C,WAAW;AACX,kBAAkB;AAClB,YAAY;AACZ,YAAY;AACZ,iBAAiB;AACjB,eAAe;AACf;AACA;AACA;;AAEA;AACA;AACA;;AAEA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA,IAAI;AACJ;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA,MAAM;AACN,MAAM,qBAAqB;AAC3B;AACA,IAAI;AACJ;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;;AAEJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA,IAAI;AACJ;;;;;;;;;;;;ACvLA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc;AACd,eAAe;AACf,cAAc;AACd,eAAe;AACf,qHAAgC;;AAEhC;AACA;AACA;;AAEA,aAAa;AACb,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;AAElB;AACA;AACA;;AAEA;;AAEA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;;AAEA;AACA;AACA,eAAe;AACf;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oBAAoB,iBAAiB;AACrC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;;AAEA,EAAE,aAAa;AACf,EAAE,aAAa;;AAEf;AACA;;AAEA,kBAAkB,SAAS;AAC3B,6BAA6B;AAC7B;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;ACzMA;AACA;AACA;AACA;;AAEA;AACA,EAAE,sIAAwC;AAC1C,EAAE;AACF,EAAE,gIAAqC;AACvC;;;;;;;;;;;ACTA;AACA;AACA;;AAEA,UAAU,mBAAO,CAAC,gBAAK;AACvB,WAAW,mBAAO,CAAC,kBAAM;;AAEzB;AACA;AACA;AACA;AACA;;AAEA,UAAU,+HAAmC;AAC7C,YAAY;AACZ,WAAW;AACX,kBAAkB;AAClB,YAAY;AACZ,YAAY;AACZ,iBAAiB;;AAEjB;AACA;AACA;;AAEA,cAAc;;AAEd;AACA;AACA;AACA;AACA;;AAEA,mBAAmB;AACnB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,4CAA4C,wBAAwB;;AAEpE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC,IAAI;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA,oBAAoB;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sCAAsC;;AAEtC;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,mBAAO,CAAC,cAAI;AAC3B,4CAA4C,kBAAkB;AAC9D;AACA;;AAEA;AACA;AACA,gBAAgB,mBAAO,CAAC,gBAAK;AAC7B;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kBAAkB,iBAAiB;AACnC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;ACvPA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY;AACZ;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvJa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB,oBAAoB,mBAAO,CAAC,sDAAqB;AACjD,6BAA6B,mBAAO,CAAC,8DAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,EAAE;AAC9D,+FAA+F,IAAI,sKAAsK,EAAE;AAC3Q;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,MAAM;AAClC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,2CAA2C,qBAAqB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,gBAAgB;;;;;;;;;;;;ACtEH;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,mBAAmB,mBAAO,CAAC,0BAAU;AACrC,oBAAoB,mBAAO,CAAC,sDAAqB;AACjD;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC,gBAAgB,KAAK;AACrB;AACA;AACA;AACA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA,qBAAqB,mCAAmC;AACxD;AACA;AACA,0BAA0B;;;;;;;;;;;;ACvBb;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,mBAAmB,mBAAO,CAAC,0BAAU;AACrC,mCAAmC,mBAAO,CAAC,0CAAkB;AAC7D,oCAAoC,mBAAO,CAAC,4BAAW;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qDAAqD,SAAS;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,QAAQ;AACpE;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;AC/EN;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB,mBAAO,CAAC,0BAAU;AACrC,oDAAoD,mBAAO,CAAC,oFAA2B;AACvF,+BAA+B,mBAAO,CAAC,kEAAwB;AAC/D,uBAAuB,mBAAO,CAAC,kDAAgB;AAC/C,2BAA2B,mBAAO,CAAC,0DAAoB;AACvD,wBAAwB,mBAAO,CAAC,oDAAiB;AACjD,+BAA+B,mBAAO,CAAC,kEAAwB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjCa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,WAAW,GAAG,gBAAgB,GAAG,WAAW,GAAG,mBAAmB,GAAG,kBAAkB,GAAG,cAAc,GAAG,aAAa,GAAG,eAAe,GAAG,cAAc,GAAG,cAAc,GAAG,gBAAgB,GAAG,eAAe,GAAG,eAAe,GAAG,YAAY,GAAG,YAAY,GAAG,iBAAiB,GAAG,cAAc,GAAG,YAAY,GAAG,aAAa,GAAG,gBAAgB,GAAG,WAAW,GAAG,eAAe,GAAG,cAAc,GAAG,mBAAmB;AAC/Z;AACA;AACA;AACA;AACA;AACA,CAAC,kBAAkB,mBAAmB,mBAAmB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,iBAAiB;AACjC,gBAAgB,qCAAqC;AACrD;AACA;AACA,iBAAiB,YAAY,IAAI,WAAW;AAC5C,2CAA2C,WAAW;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,QAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,QAAQ;AAClE;AACA,CAAC;AACD,eAAe;AACf;AACA,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,QAAQ;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,QAAQ;AAClE;AACA,CAAC;AACD,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,OAAO;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,cAAc;AACd,+BAA+B,EAAE;AACjC,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2BAA2B,EAAE;AAC7B,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,WAAW;AACX,YAAY,iBAAiB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,gBAAgB;AAChB;AACA;AACA;AACA,CAAC;AACD,WAAW;;;;;;;;;;;;AC3cE;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,mBAAmB,mBAAO,CAAC,0BAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,uBAAuB;;;;;;;;;;;;ACnBV;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,oCAAoC,mBAAO,CAAC,4BAAW;AACvD,0BAA0B,mBAAO,CAAC,wDAAmB;AACrD,uBAAuB,mBAAO,CAAC,kDAAgB;AAC/C,6BAA6B,mBAAO,CAAC,8DAAsB;AAC3D;AACA;AACA;AACA;AACA;AACA,kBAAkB,aAAa;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6FAA6F,mCAAmC;AAChI;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;;;;;;ACxCP;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,0BAA0B;AAC1B,uBAAuB,mBAAO,CAAC,kDAAgB;AAC/C;AACA;AACA;AACA,4DAA4D,qBAAqB;AACjF;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;;;;;;;;;;;;ACdb;AACb;AACA,6CAA6C;AAC7C;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,mBAAmB,mBAAO,CAAC,0BAAU;AACrC,mCAAmC,mBAAO,CAAC,0DAA0B;AACrE,oCAAoC,mBAAO,CAAC,4BAAW;AACvD,sBAAsB,mBAAO,CAAC,0DAAuB;AACrD,oBAAoB,mBAAO,CAAC,sDAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,0BAA0B,OAAO;AACjC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,+BAA+B,aAAa;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mBAAmB;;;;;;;;;;;;AC5GN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;;ACNN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,iBAAiB,GAAG,cAAc,GAAG,cAAc;AACnD,cAAc;AACd,cAAc;AACd;AACA;AACA;AACA;AACA,CAAC,gBAAgB,iBAAiB,iBAAiB;;;;;;;;;;;;ACTnD;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;UEtBA;UACA;UACA;UACA","sources":["webpack://blackguard-timer-suite/./node_modules/electron-squirrel-startup/index.js","webpack://blackguard-timer-suite/./node_modules/electron-squirrel-startup/node_modules/debug/src/browser.js","webpack://blackguard-timer-suite/./node_modules/electron-squirrel-startup/node_modules/debug/src/debug.js","webpack://blackguard-timer-suite/./node_modules/electron-squirrel-startup/node_modules/debug/src/index.js","webpack://blackguard-timer-suite/./node_modules/electron-squirrel-startup/node_modules/debug/src/node.js","webpack://blackguard-timer-suite/./node_modules/electron-squirrel-startup/node_modules/ms/index.js","webpack://blackguard-timer-suite/./src/main/bgscript-parser.ts","webpack://blackguard-timer-suite/./src/main/context-menu-manager.ts","webpack://blackguard-timer-suite/./src/main/file-manager.ts","webpack://blackguard-timer-suite/./src/main/index.ts","webpack://blackguard-timer-suite/./src/main/parser-combinators.ts","webpack://blackguard-timer-suite/./src/main/security-manager.ts","webpack://blackguard-timer-suite/./src/main/timer-manager.ts","webpack://blackguard-timer-suite/./src/main/timer-window-manager.ts","webpack://blackguard-timer-suite/./src/main/timer-window.ts","webpack://blackguard-timer-suite/./src/shared/application.ts","webpack://blackguard-timer-suite/./src/shared/constants.ts","webpack://blackguard-timer-suite/external commonjs \"node-global-key-listener\"","webpack://blackguard-timer-suite/external node-commonjs \"child_process\"","webpack://blackguard-timer-suite/external node-commonjs \"electron\"","webpack://blackguard-timer-suite/external node-commonjs \"fs\"","webpack://blackguard-timer-suite/external node-commonjs \"net\"","webpack://blackguard-timer-suite/external node-commonjs \"node:fs/promises\"","webpack://blackguard-timer-suite/external node-commonjs \"node:path\"","webpack://blackguard-timer-suite/external node-commonjs \"path\"","webpack://blackguard-timer-suite/external node-commonjs \"tty\"","webpack://blackguard-timer-suite/external node-commonjs \"util\"","webpack://blackguard-timer-suite/webpack/bootstrap","webpack://blackguard-timer-suite/webpack/before-startup","webpack://blackguard-timer-suite/webpack/startup","webpack://blackguard-timer-suite/webpack/after-startup"],"sourcesContent":["var path = require('path');\nvar spawn = require('child_process').spawn;\nvar debug = require('debug')('electron-squirrel-startup');\nvar app = require('electron').app;\n\nvar run = function(args, done) {\n  var updateExe = path.resolve(path.dirname(process.execPath), '..', 'Update.exe');\n  debug('Spawning `%s` with args `%s`', updateExe, args);\n  spawn(updateExe, args, {\n    detached: true\n  }).on('close', done);\n};\n\nvar check = function() {\n  if (process.platform === 'win32') {\n    var cmd = process.argv[1];\n    debug('processing squirrel command `%s`', cmd);\n    var target = path.basename(process.execPath);\n\n    if (cmd === '--squirrel-install' || cmd === '--squirrel-updated') {\n      run(['--createShortcut=' + target + ''], app.quit);\n      return true;\n    }\n    if (cmd === '--squirrel-uninstall') {\n      run(['--removeShortcut=' + target + ''], app.quit);\n      return true;\n    }\n    if (cmd === '--squirrel-obsolete') {\n      app.quit();\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = check();\n","/**\n * This is the web browser implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = 'undefined' != typeof chrome\n               && 'undefined' != typeof chrome.storage\n                  ? chrome.storage.local\n                  : localstorage();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n  'lightseagreen',\n  'forestgreen',\n  'goldenrod',\n  'dodgerblue',\n  'darkorchid',\n  'crimson'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\nfunction useColors() {\n  // NB: In an Electron preload script, document will be defined but not fully\n  // initialized. Since we know we're in Chrome, we'll just detect this case\n  // explicitly\n  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {\n    return true;\n  }\n\n  // is webkit? http://stackoverflow.com/a/16459606/376773\n  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n    // is firebug? http://stackoverflow.com/a/398120/376773\n    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n    // is firefox >= v31?\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n    // double check webkit in userAgent just in case we are in a worker\n    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nexports.formatters.j = function(v) {\n  try {\n    return JSON.stringify(v);\n  } catch (err) {\n    return '[UnexpectedJSONParseError]: ' + err.message;\n  }\n};\n\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var useColors = this.useColors;\n\n  args[0] = (useColors ? '%c' : '')\n    + this.namespace\n    + (useColors ? ' %c' : ' ')\n    + args[0]\n    + (useColors ? '%c ' : ' ')\n    + '+' + exports.humanize(this.diff);\n\n  if (!useColors) return;\n\n  var c = 'color: ' + this.color;\n  args.splice(1, 0, c, 'color: inherit')\n\n  // the final \"%c\" is somewhat tricky, because there could be other\n  // arguments passed either before or after the %c, so we need to\n  // figure out the correct index to insert the CSS into\n  var index = 0;\n  var lastC = 0;\n  args[0].replace(/%[a-zA-Z%]/g, function(match) {\n    if ('%%' === match) return;\n    index++;\n    if ('%c' === match) {\n      // we only are interested in the *last* %c\n      // (the user may have provided their own)\n      lastC = index;\n    }\n  });\n\n  args.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.log()` when available.\n * No-op when `console.log` is not a \"function\".\n *\n * @api public\n */\n\nfunction log() {\n  // this hackery is required for IE8/9, where\n  // the `console.log` function doesn't have 'apply'\n  return 'object' === typeof console\n    && console.log\n    && Function.prototype.apply.call(console.log, console, arguments);\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  try {\n    if (null == namespaces) {\n      exports.storage.removeItem('debug');\n    } else {\n      exports.storage.debug = namespaces;\n    }\n  } catch(e) {}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  var r;\n  try {\n    r = exports.storage.debug;\n  } catch(e) {}\n\n  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n  if (!r && typeof process !== 'undefined' && 'env' in process) {\n    r = process.env.DEBUG;\n  }\n\n  return r;\n}\n\n/**\n * Enable namespaces listed in `localStorage.debug` initially.\n */\n\nexports.enable(load());\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n  try {\n    return window.localStorage;\n  } catch (e) {}\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = createDebug.debug = createDebug['default'] = createDebug;\nexports.coerce = coerce;\nexports.disable = disable;\nexports.enable = enable;\nexports.enabled = enabled;\nexports.humanize = require('ms');\n\n/**\n * The currently active debug mode names, and names to skip.\n */\n\nexports.names = [];\nexports.skips = [];\n\n/**\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n *\n * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n */\n\nexports.formatters = {};\n\n/**\n * Previous log timestamp.\n */\n\nvar prevTime;\n\n/**\n * Select a color.\n * @param {String} namespace\n * @return {Number}\n * @api private\n */\n\nfunction selectColor(namespace) {\n  var hash = 0, i;\n\n  for (i in namespace) {\n    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);\n    hash |= 0; // Convert to 32bit integer\n  }\n\n  return exports.colors[Math.abs(hash) % exports.colors.length];\n}\n\n/**\n * Create a debugger with the given `namespace`.\n *\n * @param {String} namespace\n * @return {Function}\n * @api public\n */\n\nfunction createDebug(namespace) {\n\n  function debug() {\n    // disabled?\n    if (!debug.enabled) return;\n\n    var self = debug;\n\n    // set `diff` timestamp\n    var curr = +new Date();\n    var ms = curr - (prevTime || curr);\n    self.diff = ms;\n    self.prev = prevTime;\n    self.curr = curr;\n    prevTime = curr;\n\n    // turn the `arguments` into a proper Array\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n\n    args[0] = exports.coerce(args[0]);\n\n    if ('string' !== typeof args[0]) {\n      // anything else let's inspect with %O\n      args.unshift('%O');\n    }\n\n    // apply any `formatters` transformations\n    var index = 0;\n    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {\n      // if we encounter an escaped % then don't increase the array index\n      if (match === '%%') return match;\n      index++;\n      var formatter = exports.formatters[format];\n      if ('function' === typeof formatter) {\n        var val = args[index];\n        match = formatter.call(self, val);\n\n        // now we need to remove `args[index]` since it's inlined in the `format`\n        args.splice(index, 1);\n        index--;\n      }\n      return match;\n    });\n\n    // apply env-specific formatting (colors, etc.)\n    exports.formatArgs.call(self, args);\n\n    var logFn = debug.log || exports.log || console.log.bind(console);\n    logFn.apply(self, args);\n  }\n\n  debug.namespace = namespace;\n  debug.enabled = exports.enabled(namespace);\n  debug.useColors = exports.useColors();\n  debug.color = selectColor(namespace);\n\n  // env-specific initialization logic for debug instances\n  if ('function' === typeof exports.init) {\n    exports.init(debug);\n  }\n\n  return debug;\n}\n\n/**\n * Enables a debug mode by namespaces. This can include modes\n * separated by a colon and wildcards.\n *\n * @param {String} namespaces\n * @api public\n */\n\nfunction enable(namespaces) {\n  exports.save(namespaces);\n\n  exports.names = [];\n  exports.skips = [];\n\n  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n  var len = split.length;\n\n  for (var i = 0; i < len; i++) {\n    if (!split[i]) continue; // ignore empty strings\n    namespaces = split[i].replace(/\\*/g, '.*?');\n    if (namespaces[0] === '-') {\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n    } else {\n      exports.names.push(new RegExp('^' + namespaces + '$'));\n    }\n  }\n}\n\n/**\n * Disable debug output.\n *\n * @api public\n */\n\nfunction disable() {\n  exports.enable('');\n}\n\n/**\n * Returns true if the given mode name is enabled, false otherwise.\n *\n * @param {String} name\n * @return {Boolean}\n * @api public\n */\n\nfunction enabled(name) {\n  var i, len;\n  for (i = 0, len = exports.skips.length; i < len; i++) {\n    if (exports.skips[i].test(name)) {\n      return false;\n    }\n  }\n  for (i = 0, len = exports.names.length; i < len; i++) {\n    if (exports.names[i].test(name)) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Coerce `val`.\n *\n * @param {Mixed} val\n * @return {Mixed}\n * @api private\n */\n\nfunction coerce(val) {\n  if (val instanceof Error) return val.stack || val.message;\n  return val;\n}\n","/**\n * Detect Electron renderer process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process !== 'undefined' && process.type === 'renderer') {\n  module.exports = require('./browser.js');\n} else {\n  module.exports = require('./node.js');\n}\n","/**\n * Module dependencies.\n */\n\nvar tty = require('tty');\nvar util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n *\n * Expose `debug()` as the module.\n */\n\nexports = module.exports = require('./debug');\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(function (key) {\n  return /^debug_/i.test(key);\n}).reduce(function (obj, key) {\n  // camel-case\n  var prop = key\n    .substring(6)\n    .toLowerCase()\n    .replace(/_([a-z])/g, function (_, k) { return k.toUpperCase() });\n\n  // coerce string value into JS value\n  var val = process.env[key];\n  if (/^(yes|on|true|enabled)$/i.test(val)) val = true;\n  else if (/^(no|off|false|disabled)$/i.test(val)) val = false;\n  else if (val === 'null') val = null;\n  else val = Number(val);\n\n  obj[prop] = val;\n  return obj;\n}, {});\n\n/**\n * The file descriptor to write the `debug()` calls to.\n * Set the `DEBUG_FD` env variable to override with another value. i.e.:\n *\n *   $ DEBUG_FD=3 node script.js 3>debug.log\n */\n\nvar fd = parseInt(process.env.DEBUG_FD, 10) || 2;\n\nif (1 !== fd && 2 !== fd) {\n  util.deprecate(function(){}, 'except for stderr(2) and stdout(1), any other usage of DEBUG_FD is deprecated. Override debug.log if you want to use a different log function (https://git.io/debug_fd)')()\n}\n\nvar stream = 1 === fd ? process.stdout :\n             2 === fd ? process.stderr :\n             createWritableStdioStream(fd);\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n  return 'colors' in exports.inspectOpts\n    ? Boolean(exports.inspectOpts.colors)\n    : tty.isatty(fd);\n}\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nexports.formatters.o = function(v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts)\n    .split('\\n').map(function(str) {\n      return str.trim()\n    }).join(' ');\n};\n\n/**\n * Map %o to `util.inspect()`, allowing multiple lines if needed.\n */\n\nexports.formatters.O = function(v) {\n  this.inspectOpts.colors = this.useColors;\n  return util.inspect(v, this.inspectOpts);\n};\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n  var name = this.namespace;\n  var useColors = this.useColors;\n\n  if (useColors) {\n    var c = this.color;\n    var prefix = '  \\u001b[3' + c + ';1m' + name + ' ' + '\\u001b[0m';\n\n    args[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n    args.push('\\u001b[3' + c + 'm+' + exports.humanize(this.diff) + '\\u001b[0m');\n  } else {\n    args[0] = new Date().toUTCString()\n      + ' ' + name + ' ' + args[0];\n  }\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to `stream`.\n */\n\nfunction log() {\n  return stream.write(util.format.apply(util, arguments) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\n\nfunction save(namespaces) {\n  if (null == namespaces) {\n    // If you set a process.env field to null or undefined, it gets cast to the\n    // string 'null' or 'undefined'. Just delete instead.\n    delete process.env.DEBUG;\n  } else {\n    process.env.DEBUG = namespaces;\n  }\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n  return process.env.DEBUG;\n}\n\n/**\n * Copied from `node/src/node.js`.\n *\n * XXX: It's lame that node doesn't expose this API out-of-the-box. It also\n * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.\n */\n\nfunction createWritableStdioStream (fd) {\n  var stream;\n  var tty_wrap = process.binding('tty_wrap');\n\n  // Note stream._type is used for test-module-load-list.js\n\n  switch (tty_wrap.guessHandleType(fd)) {\n    case 'TTY':\n      stream = new tty.WriteStream(fd);\n      stream._type = 'tty';\n\n      // Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    case 'FILE':\n      var fs = require('fs');\n      stream = new fs.SyncWriteStream(fd, { autoClose: false });\n      stream._type = 'fs';\n      break;\n\n    case 'PIPE':\n    case 'TCP':\n      var net = require('net');\n      stream = new net.Socket({\n        fd: fd,\n        readable: false,\n        writable: true\n      });\n\n      // FIXME Should probably have an option in net.Socket to create a\n      // stream from an existing fd which is writable only. But for now\n      // we'll just add this hack and set the `readable` member to false.\n      // Test: ./node test/fixtures/echo.js < /etc/passwd\n      stream.readable = false;\n      stream.read = null;\n      stream._type = 'pipe';\n\n      // FIXME Hack to have stream not keep the event loop alive.\n      // See https://github.com/joyent/node/issues/1726\n      if (stream._handle && stream._handle.unref) {\n        stream._handle.unref();\n      }\n      break;\n\n    default:\n      // Probably an error on in uv_guess_handle()\n      throw new Error('Implement me. Unknown stream file type!');\n  }\n\n  // For supporting legacy API we put the FD here.\n  stream.fd = fd;\n\n  stream._isStdio = true;\n\n  return stream;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init (debug) {\n  debug.inspectOpts = {};\n\n  var keys = Object.keys(exports.inspectOpts);\n  for (var i = 0; i < keys.length; i++) {\n    debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n  }\n}\n\n/**\n * Enable namespaces listed in `process.env.DEBUG` initially.\n */\n\nexports.enable(load());\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isNaN(val) === false) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  if (ms >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (ms >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (ms >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (ms >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  return plural(ms, d, 'day') ||\n    plural(ms, h, 'hour') ||\n    plural(ms, m, 'minute') ||\n    plural(ms, s, 'second') ||\n    ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) {\n    return;\n  }\n  if (ms < n * 1.5) {\n    return Math.floor(ms / n) + ' ' + name;\n  }\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Bgscript = void 0;\nconst constants_1 = require(\"../shared/constants\");\nconst parser_combinators_1 = require(\"./parser-combinators\");\nconst titleTag = Symbol(\"title\");\nconst keyBindingTag = Symbol(\"keyBinding\");\nconst countdownTag = Symbol(\"countdown\");\nconst timeTag = Symbol(\"time\");\nclass Primitive {\n    static Text = (0, parser_combinators_1.literal)(/^[^\\s(),:]+/);\n    static Name = (0, parser_combinators_1.literal)(/^([^\\s(),]|( |\\t))+/);\n    static Spacing = (0, parser_combinators_1.literal)(/^( |\\t)+/);\n    static Indent = (0, parser_combinators_1.literal)(/^( ){4}|\\t/).dispose();\n    static Time = (0, parser_combinators_1.sequence)((0, parser_combinators_1.literal)(/^[0-9]{1,2}/).map(parser_combinators_1.toNumber), (0, parser_combinators_1.join)(\"\", (0, parser_combinators_1.literal)(\":\").dispose(), (0, parser_combinators_1.literal)(/^[0-9]{2}/)).map(parser_combinators_1.toNumber))\n        .map(([minutes, seconds]) => (minutes * constants_1.minute + seconds * constants_1.second))\n        .map((0, parser_combinators_1.tag)(timeTag));\n}\nconst GenericAction = (0, parser_combinators_1.compact)(Primitive.Text.onFail(\"An action must have a valid method\"), (0, parser_combinators_1.maybe)((0, parser_combinators_1.sequence)(Primitive.Spacing.dispose().onFail(\"Expected spacing between method and parameters\"), (0, parser_combinators_1.seperated)(Primitive.Text, Primitive.Spacing))), (0, parser_combinators_1.maybe)(Primitive.Spacing).dispose(), (0, parser_combinators_1.choice)(parser_combinators_1.lineBreaks.dispose(), parser_combinators_1.end).onFail(\"Expected line break or end of file\"))\n    .map(([method, params]) => ({\n    method,\n    params\n}));\nclass KeyBinding {\n    static Operator = (0, parser_combinators_1.literal)(\"#\").dispose();\n    static Definition = (0, parser_combinators_1.compact)(Primitive.Spacing.dispose().onFail(\"Expected spacing operator and key code\"), Primitive.Text.onFail(\"Invalid key code\"), Primitive.Spacing.dispose().onFail(\"Expected spacing between key code and binding name\"), (0, parser_combinators_1.trim)(Primitive.Name).onFail(\"Invalid key binding name\"), (0, parser_combinators_1.maybe)(Primitive.Spacing).dispose(), parser_combinators_1.lineBreaks.dispose().onFail(\"Expected line break\"))\n        .map(([key, name]) => ({\n        key,\n        name\n    }));\n    static Parser = (0, parser_combinators_1.flatten)((0, parser_combinators_1.compact)(KeyBinding.Operator, (0, parser_combinators_1.required)((0, parser_combinators_1.sequence)(KeyBinding.Definition, (0, parser_combinators_1.some)((0, parser_combinators_1.branch)(Primitive.Indent, (0, parser_combinators_1.required)(GenericAction))).onFail(\"Could not find key binding actions\")))))\n        .map(([definition, actions]) => ({ definition, actions }))\n        .map((0, parser_combinators_1.tag)(keyBindingTag));\n}\nclass Countdown {\n    static Operator = (0, parser_combinators_1.literal)(\">\").dispose();\n    static ActionOperator = (0, parser_combinators_1.literal)(\"@\");\n    static Definition = (0, parser_combinators_1.compact)(Primitive.Spacing.dispose().onFail(\"Expected spacing between operator and countdown name\"), Primitive.Text.onFail(\"Invalid countdown name\"), (0, parser_combinators_1.maybe)(Primitive.Spacing).dispose(), parser_combinators_1.lineBreaks.dispose().onFail(\"Expected line break\"))\n        .map(([name]) => ({ name }));\n    static Action = (0, parser_combinators_1.compact)(Primitive.Spacing.dispose().onFail(\"Expected spacing between operator and time\"), (0, parser_combinators_1.choice)(Primitive.Time, Primitive.Text).onFail(\"Invalid time value\"), Primitive.Spacing.dispose().onFail(\"Expected spacing between time and method\"), Primitive.Text.onFail(\"An action must have a valid method\"), (0, parser_combinators_1.maybe)(Primitive.Spacing).dispose(), (0, parser_combinators_1.seperated)(Primitive.Text, Primitive.Spacing), (0, parser_combinators_1.maybe)(Primitive.Spacing).dispose(), (0, parser_combinators_1.choice)(parser_combinators_1.lineBreaks.dispose(), parser_combinators_1.end).onFail(\"Expected line break or end of file\"))\n        .map(([method, time, params]) => ({\n        method,\n        time,\n        params\n    }));\n    static Parser = (0, parser_combinators_1.flatten)((0, parser_combinators_1.compact)(Countdown.Operator, (0, parser_combinators_1.required)((0, parser_combinators_1.sequence)(Countdown.Definition, (0, parser_combinators_1.some)((0, parser_combinators_1.branch)((0, parser_combinators_1.sequence)(Primitive.Indent, Countdown.ActionOperator), (0, parser_combinators_1.required)(Countdown.Action))).onFail(\"Could not find countdown actions\")))))\n        .map(([definition, actions]) => ({ definition, actions }))\n        .map((0, parser_combinators_1.tag)(countdownTag));\n}\nclass Bgscript {\n    static Parser = (0, parser_combinators_1.compact)((0, parser_combinators_1.maybe)(parser_combinators_1.whiteSpaces).dispose(), (0, parser_combinators_1.trim)(Primitive.Name).map((0, parser_combinators_1.tag)(titleTag)).onFail(\"A valid title is required\"), (0, parser_combinators_1.maybe)(parser_combinators_1.whiteSpaces).dispose(), (0, parser_combinators_1.seperated)((0, parser_combinators_1.choice)(KeyBinding.Parser, Countdown.Parser), (0, parser_combinators_1.maybe)(parser_combinators_1.whiteSpaces)))\n        .map(([title, body]) => {\n        const parsedScript = {\n            title,\n            countdowns: [],\n            keyBindings: []\n        };\n        for (const block of body) {\n            switch (block.tag) {\n                case countdownTag:\n                    parsedScript.countdowns.push(block.value);\n                    break;\n                case keyBindingTag:\n                    parsedScript.keyBindings.push(block.value);\n                    break;\n            }\n        }\n        return parsedScript;\n    });\n}\nexports.Bgscript = Bgscript;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ContextMenuManager = void 0;\nconst electron_1 = require(\"electron\");\nconst constants_1 = require(\"../shared/constants\");\nclass ContextMenuManager {\n    timerWindowManager;\n    constructor({ timerWindowManager }) {\n        this.timerWindowManager = timerWindowManager;\n        electron_1.ipcMain.on(constants_1.EventName.SHOW_CONTEXT_MENU, this.createContextMenu);\n    }\n    createContextMenu = ({ sender }) => {\n        const { id } = sender;\n        const timerWindow = this.timerWindowManager.get(id);\n        if (!timerWindow) {\n            return;\n        }\n        const menuTemplate = [];\n        menuTemplate.push({ role: \"close\" });\n        const menu = electron_1.Menu.buildFromTemplate(menuTemplate);\n        menu.popup({ window: timerWindow.browserWindow });\n    };\n}\nexports.ContextMenuManager = ContextMenuManager;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FileManager = void 0;\nconst electron_1 = require(\"electron\");\nconst promises_1 = __importDefault(require(\"node:fs/promises\"));\nconst node_path_1 = __importDefault(require(\"node:path\"));\nclass FileManager {\n    static userDataPath = electron_1.app.getPath(\"userData\");\n    static myDocumentsPath = electron_1.app.getPath(\"documents\");\n    async saveJson(filePath, json) {\n        try {\n            await this.saveFile(filePath, JSON.stringify(json));\n        }\n        catch (error) {\n            console.error(`Failed to save json at: ${filePath}`, error);\n        }\n    }\n    async saveFile(filePath, contents) {\n        try {\n            await promises_1.default.writeFile(filePath, contents);\n        }\n        catch (error) {\n            console.error(`Failed to save file at: ${filePath}`, error);\n        }\n    }\n    async loadJson(filePath) {\n        const loadedFile = await this.loadFile(filePath);\n        if (loadedFile.contents !== null) {\n            try {\n                const loadedJson = {\n                    ...loadedFile,\n                    contents: JSON.parse(loadedFile.contents)\n                };\n                return loadedJson;\n            }\n            catch (error) {\n                console.error(`Failed to load json at: ${filePath}`, error);\n            }\n        }\n        return loadedFile;\n    }\n    async loadFile(filePath) {\n        const file = {\n            contents: null,\n            createTime: null,\n            lastUpdateTime: null\n        };\n        try {\n            const stats = await promises_1.default.stat(filePath);\n            const fileContents = await promises_1.default.readFile(filePath, {\n                encoding: \"utf8\"\n            });\n            file.contents = fileContents;\n            file.createTime = stats.birthtimeMs;\n            file.lastUpdateTime = stats.mtimeMs;\n        }\n        catch (error) {\n            console.error(`Failed to load file at: ${filePath}`, error);\n        }\n        return file;\n    }\n    async loadFiles(dirPath) {\n        const loadedFiles = [];\n        try {\n            const fileNames = await promises_1.default.readdir(dirPath);\n            for (const fileName of fileNames) {\n                const filePath = node_path_1.default.join(dirPath, fileName);\n                loadedFiles.push(this.loadFile(filePath));\n            }\n        }\n        catch (error) {\n            console.error(`Failed to load all files from: ${dirPath}`, error);\n        }\n        return Promise.all(loadedFiles);\n    }\n}\nexports.FileManager = FileManager;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst electron_1 = require(\"electron\");\nconst electron_squirrel_startup_1 = __importDefault(require(\"electron-squirrel-startup\"));\nconst context_menu_manager_1 = require(\"./context-menu-manager\");\nconst file_manager_1 = require(\"./file-manager\");\nconst security_manager_1 = require(\"./security-manager\");\nconst timer_manager_1 = require(\"./timer-manager\");\nconst timer_window_manager_1 = require(\"./timer-window-manager\");\nif (electron_squirrel_startup_1.default) {\n    electron_1.app.quit();\n    process.exit(0);\n}\nconst main = async () => {\n    await electron_1.app.whenReady();\n    new security_manager_1.SecurityManager();\n    const fileManager = new file_manager_1.FileManager();\n    const timerWindowManager = new timer_window_manager_1.TimerWindowManager();\n    new context_menu_manager_1.ContextMenuManager({\n        timerWindowManager\n    });\n    const timerManager = new timer_manager_1.TimerManager({\n        fileManager\n    });\n    await timerManager.init();\n    // // await State.initialize();\n    // new ContextMenuManager();\n    // new KeyBindingsManager();\n    // State.setInstance(new Instance());\n};\nmain();\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.tag = exports.toNumber = exports.end = exports.whiteSpaces = exports.lineBreaks = exports.digits = exports.digit = exports.letters = exports.letter = exports.branch = exports.required = exports.compact = exports.flatten = exports.join = exports.trim = exports.seperated = exports.choice = exports.some = exports.maybe = exports.sequence = exports.has = exports.literal = exports.Parser = exports.StateStatus = void 0;\nvar StateStatus;\n(function (StateStatus) {\n    StateStatus[\"Good\"] = \"good\";\n    StateStatus[\"Bad\"] = \"bad\";\n    StateStatus[\"Fatal\"] = \"fatal\";\n})(StateStatus || (exports.StateStatus = StateStatus = {}));\nclass ParseError extends Error {\n    description;\n    state;\n    constructor(description, state) {\n        super();\n        this.description = description;\n        this.state = state;\n    }\n    get message() {\n        const { offset, source } = this.state;\n        const { targetLine, lineNumber, lineOffset } = this.getTargetLine(source, offset);\n        const lineNumberSeperatorSpacing = 3;\n        return this.description + \"\\n\"\n            + `${lineNumber} | ${targetLine}` + \"\\n\"\n            + \"^\".padStart(lineOffset + `${lineNumber}`.length\n                + lineNumberSeperatorSpacing + 1);\n    }\n    getTargetLine(source, offset) {\n        const lines = source.split(/(\\r\\n|\\r|\\n)/);\n        let currentOffset = 0;\n        let lineNumber = 0;\n        let targetLine = null;\n        for (const line of lines) {\n            currentOffset += line.length;\n            if (currentOffset >= offset) {\n                targetLine = line;\n                break;\n            }\n            lineNumber++;\n        }\n        if (targetLine === null) {\n            throw new Error(\"Failed to find invalid line\");\n        }\n        return {\n            targetLine,\n            lineNumber,\n            lineOffset: targetLine.length - (currentOffset - offset)\n        };\n    }\n}\nclass Parser {\n    transforms = [];\n    onFailTransformer = null;\n    constructor(transformer, onFail) {\n        if (Array.isArray(transformer)) {\n            this.transforms.push(...transformer);\n        }\n        else {\n            this.transforms.push(transformer);\n        }\n        if (onFail) {\n            this.onFailTransformer = onFail;\n        }\n    }\n    parse(sourceOrState) {\n        if (typeof sourceOrState === \"string\") {\n            return this.parseWithState({\n                offset: 0,\n                result: null,\n                source: sourceOrState,\n                status: StateStatus.Good,\n                error: null\n            });\n        }\n        return this.parseWithState(sourceOrState);\n    }\n    map(callback) {\n        return new Parser([\n            ...this.transforms,\n            (initialState) => {\n                if (initialState.status !== StateStatus.Good) {\n                    return initialState;\n                }\n                return {\n                    ...initialState,\n                    result: callback(initialState.result)\n                };\n            }\n        ]);\n    }\n    dispose() {\n        return this.map(() => null);\n    }\n    onFail(newErrorMessage) {\n        return new Parser(this.transforms, (state) => {\n            if (state.error === null || state.status === StateStatus.Good) {\n                return state;\n            }\n            if (typeof newErrorMessage === \"string\") {\n                state.error.description = newErrorMessage;\n            }\n            else {\n                state.error.description = newErrorMessage(state);\n            }\n            return state;\n        });\n    }\n    parseWithState(state) {\n        let nextState = state;\n        for (const transform of this.transforms) {\n            nextState = transform(nextState);\n        }\n        if (this.onFailTransformer) {\n            nextState = this.onFailTransformer(nextState);\n        }\n        if (nextState.status === StateStatus.Fatal) {\n            throw nextState.error;\n        }\n        return nextState;\n    }\n}\nexports.Parser = Parser;\nconst literal = (literal) => new Parser((initialState) => {\n    const { offset, source } = initialState;\n    const target = source.slice(offset);\n    if (typeof literal === \"string\") {\n        if (target.startsWith(literal)) {\n            return {\n                ...initialState,\n                offset: offset + literal.length,\n                result: literal,\n                status: StateStatus.Good,\n                error: null\n            };\n        }\n        else {\n            return {\n                ...initialState,\n                result: null,\n                status: StateStatus.Bad,\n                error: new ParseError(`Could not find pattern: \"${literal}\"`, initialState)\n            };\n        }\n    }\n    const matches = target.match(literal);\n    if (matches) {\n        const result = matches[0];\n        return {\n            ...initialState,\n            offset: offset + result.length,\n            result,\n            status: StateStatus.Good,\n            error: null\n        };\n    }\n    return {\n        ...initialState,\n        status: StateStatus.Bad,\n        result: null,\n        error: new ParseError(`Could not find pattern: \"${literal}\"`, initialState)\n    };\n});\nexports.literal = literal;\nconst has = (literal) => new Parser((initialState) => {\n    const { offset, source } = initialState;\n    const target = source.slice(offset);\n    if (typeof literal === \"string\") {\n        if (target.startsWith(literal)) {\n            return {\n                ...initialState,\n                result: literal,\n                status: StateStatus.Good,\n                error: null\n            };\n        }\n        else {\n            return {\n                ...initialState,\n                result: null,\n                status: StateStatus.Bad,\n                error: new ParseError(`Could not find pattern: \"${literal}\"`, initialState)\n            };\n        }\n    }\n    const matches = target.match(literal);\n    if (matches) {\n        const result = matches[0];\n        return {\n            ...initialState,\n            result,\n            status: StateStatus.Good,\n            error: null\n        };\n    }\n    return {\n        ...initialState,\n        status: StateStatus.Bad,\n        result: null,\n        error: new ParseError(`Could not find pattern: \"${literal}\"`, initialState)\n    };\n});\nexports.has = has;\nconst sequence = (...parsers) => new Parser((initialState) => {\n    const result = [];\n    let nextState = initialState;\n    for (const parser of parsers) {\n        nextState = parser.parse(nextState);\n        if (nextState.status === StateStatus.Good) {\n            result.push(nextState.result);\n        }\n        else {\n            return nextState;\n        }\n    }\n    return {\n        ...nextState,\n        result,\n        status: StateStatus.Good,\n        error: null\n    };\n});\nexports.sequence = sequence;\nconst maybe = (parser) => new Parser((initialState) => {\n    const nextState = parser.parse(initialState);\n    return {\n        ...nextState,\n        status: StateStatus.Good,\n        error: null\n    };\n});\nexports.maybe = maybe;\nconst some = (parser) => new Parser((initialState) => {\n    let nextState = initialState;\n    const result = [];\n    while (true) {\n        nextState = parser.parse(nextState);\n        if (nextState.status === StateStatus.Good) {\n            result.push(nextState.result);\n        }\n        else {\n            break;\n        }\n    }\n    if (result.length === 0) {\n        return {\n            ...nextState,\n            result: null,\n            status: StateStatus.Bad,\n            error: new ParseError(`Could not find some ${parser}`, nextState)\n        };\n    }\n    return {\n        ...nextState,\n        result,\n        status: StateStatus.Good,\n        error: null\n    };\n});\nexports.some = some;\nconst choice = (...parsers) => new Parser((initialState) => {\n    for (const parser of parsers) {\n        const newState = parser.parse(initialState);\n        if (newState.status === StateStatus.Good) {\n            return newState;\n        }\n    }\n    return {\n        ...initialState,\n        result: null,\n        status: StateStatus.Bad,\n        error: new ParseError(\"No valid choice provided\", initialState)\n    };\n});\nexports.choice = choice;\nconst seperated = (tokenParser, seperatorParser) => new Parser((initialState) => {\n    const result = [];\n    let nextState = initialState;\n    while (true) {\n        nextState = tokenParser.parse(nextState);\n        if (nextState.status === StateStatus.Good) {\n            result.push(nextState.result);\n        }\n        else {\n            break;\n        }\n        nextState = seperatorParser.parse(nextState);\n        if (nextState.status === StateStatus.Bad) {\n            break;\n        }\n    }\n    return {\n        ...nextState,\n        result,\n        status: StateStatus.Good,\n        error: null\n    };\n});\nexports.seperated = seperated;\nconst trim = (parser) => new Parser((initialState) => {\n    const newState = parser.parse(initialState);\n    if (newState.status === StateStatus.Good\n        && typeof newState.result === \"string\") {\n        newState.result = newState.result.trim();\n    }\n    return newState;\n});\nexports.trim = trim;\nconst join = (seperator, ...parsers) => new Parser((initialState) => {\n    const newState = (0, exports.sequence)(...parsers).parse(initialState);\n    if (newState.status === StateStatus.Good\n        && Array.isArray(newState.result)) {\n        newState.result = newState.result.join(seperator);\n    }\n    return newState;\n});\nexports.join = join;\nconst flatten = (parser) => new Parser((initialState) => {\n    const newState = parser.parse(initialState);\n    if (newState.status === StateStatus.Good) {\n        newState.result = [newState.result].flat(Infinity);\n    }\n    return newState;\n});\nexports.flatten = flatten;\nconst compact = (...parsers) => new Parser((initialState) => {\n    const newState = (0, exports.sequence)(...parsers).parse(initialState);\n    const results = [];\n    if (newState.status === StateStatus.Good\n        && Array.isArray(newState.result)) {\n        for (const result of newState.result) {\n            if (!!result) {\n                results.push(result);\n            }\n        }\n    }\n    else {\n        return newState;\n    }\n    return {\n        ...newState,\n        result: results\n    };\n});\nexports.compact = compact;\nconst required = (parser) => new Parser((initialState) => {\n    const newState = parser.parse(initialState);\n    if (newState.status === StateStatus.Bad) {\n        return {\n            ...newState,\n            status: StateStatus.Fatal\n        };\n    }\n    return newState;\n});\nexports.required = required;\nconst branch = (condition, trueBranch, falseBranch) => new Parser((initialState) => {\n    let nextState = condition.parse(initialState);\n    const passes = nextState.status === StateStatus.Good;\n    if (passes) {\n        return trueBranch.parse(nextState);\n    }\n    else if (falseBranch) {\n        return falseBranch.parse(initialState);\n    }\n    return {\n        ...initialState,\n        result: null,\n        status: StateStatus.Bad,\n        error: new ParseError(\"No false branch provided\", initialState)\n    };\n});\nexports.branch = branch;\nconst letterRegex = /^[a-zA-Z]{1}/;\nexports.letter = new Parser((initialState) => {\n    try {\n        return (0, exports.literal)(letterRegex).parse(initialState);\n    }\n    catch {\n        throw new ParseError(\"Invalid letter\", initialState);\n    }\n});\nconst lettersRegex = /^[a-zA-Z]+/;\nexports.letters = new Parser((initialState) => {\n    const newState = (0, exports.literal)(lettersRegex).parse(initialState);\n    if (newState.status === StateStatus.Bad) {\n        return {\n            ...newState,\n            error: new ParseError(\"Invalid letters\", initialState)\n        };\n    }\n    return newState;\n});\nconst digitRegex = /^[0-9]{1}/;\nexports.digit = new Parser((initialState) => {\n    const newState = (0, exports.literal)(digitRegex).parse(initialState);\n    if (newState.status === StateStatus.Bad) {\n        return {\n            ...newState,\n            error: new ParseError(\"Invalid digit\", initialState)\n        };\n    }\n    return newState;\n});\nconst digitsRegex = /^[0-9]+/;\nexports.digits = new Parser((initialState) => {\n    const newState = (0, exports.literal)(digitsRegex).parse(initialState);\n    if (newState.status === StateStatus.Bad) {\n        return {\n            ...newState,\n            error: new ParseError(\"Invalid digits\", initialState)\n        };\n    }\n    return newState;\n});\nconst lineBreaksRegex = /^(\\r\\n|\\r|\\n)+/;\nexports.lineBreaks = new Parser((initialState) => {\n    const newState = (0, exports.literal)(lineBreaksRegex).parse(initialState);\n    if (newState.status === StateStatus.Bad) {\n        return {\n            ...newState,\n            error: new ParseError(\"Invalid line breaks\", initialState)\n        };\n    }\n    return newState;\n});\nconst whiteSpacesRegex = /^\\s+/;\nexports.whiteSpaces = new Parser((initialState) => {\n    const newState = (0, exports.literal)(whiteSpacesRegex).parse(initialState);\n    if (newState.status === StateStatus.Bad) {\n        return {\n            ...newState,\n            error: new ParseError(\"Invalid white spaces\", initialState)\n        };\n    }\n    return newState;\n});\nexports.end = new Parser((initialState) => {\n    const { offset, source } = initialState;\n    const target = source.slice(offset);\n    if (target === \"\") {\n        return {\n            ...initialState,\n            result: null,\n            error: null,\n            status: StateStatus.Good\n        };\n    }\n    return {\n        ...initialState,\n        result: null,\n        error: new ParseError(\"Expected end of input\", initialState),\n        status: StateStatus.Bad\n    };\n});\nconst toNumber = (result) => Number(result);\nexports.toNumber = toNumber;\nconst tag = (tag) => (result) => ({\n    tag,\n    value: result\n});\nexports.tag = tag;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SecurityManager = void 0;\nconst electron_1 = require(\"electron\");\nclass SecurityManager {\n    constructor() {\n        this.applyHeaders();\n    }\n    applyHeaders() {\n        electron_1.session.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n            callback({\n                responseHeaders: {\n                    ...details.responseHeaders,\n                    \"Content-Security-Policy\": [\"default-src 'self'\"]\n                }\n            });\n        });\n    }\n}\nexports.SecurityManager = SecurityManager;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimerManager = void 0;\nconst node_path_1 = __importDefault(require(\"node:path\"));\nconst bgscript_parser_1 = require(\"./bgscript-parser\");\nconst file_manager_1 = require(\"./file-manager\");\nconst parser_combinators_1 = require(\"./parser-combinators\");\nclass TimerManager {\n    static cachePath = node_path_1.default.join(file_manager_1.FileManager.userDataPath, \"/timer-cache.json\");\n    static timersPath = node_path_1.default.join(__dirname, \"../../timers\");\n    fileManager;\n    timers = [];\n    constructor({ fileManager }) {\n        this.fileManager = fileManager;\n    }\n    async init() {\n    }\n    async getTimerCache() {\n    }\n    async getTimerSource() {\n        const timerSources = await this.fileManager.loadFiles(TimerManager.timersPath);\n        for (const source of timerSources) {\n            if (source.contents === null) {\n                continue;\n            }\n            const parsedTimer = bgscript_parser_1.Bgscript.Parser.parse(source.contents);\n            if (parsedTimer.status === parser_combinators_1.StateStatus.Fatal) {\n                throw parsedTimer.error;\n            }\n            if (typeof parsedTimer.result !== \"object\"\n                || parsedTimer.result === null) {\n                throw new Error(`Expected parser result to be an object. Instead recieved: ${JSON.stringify(parsedTimer.result)}`);\n            }\n            this.timers.push(parsedTimer.result);\n        }\n    }\n}\nexports.TimerManager = TimerManager;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimerWindowManager = void 0;\nconst timer_window_1 = require(\"./timer-window\");\nclass TimerWindowManager {\n    windows = new Map();\n    constructor() {\n        const testWindow = new timer_window_1.TimerWindow({ title: \"Test Timer\" });\n        this.windows.set(testWindow.id, testWindow);\n    }\n    get(id) {\n        return this.windows.get(id);\n    }\n}\nexports.TimerWindowManager = TimerWindowManager;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TimerWindow = void 0;\nconst electron_1 = require(\"electron\");\nconst node_global_key_listener_1 = require(\"node-global-key-listener\");\nconst node_path_1 = __importDefault(require(\"node:path\"));\nconst application_1 = require(\"../shared/application\");\nconst constants_1 = require(\"../shared/constants\");\nclass TimerWindow {\n    static WM_MOUSEMOVE = 0x0200;\n    static WM_LBUTTONUP = 0x0202;\n    static MK_LBUTTON = 0x0001;\n    static GlobalKeyboardListener = new node_global_key_listener_1.GlobalKeyboardListener();\n    browserWindow;\n    loaded = false;\n    resizeable = false;\n    dragPosition = {\n        x: 0,\n        y: 0,\n        height: 0,\n        width: 0\n    };\n    constructor({ title }) {\n        this.browserWindow = new electron_1.BrowserWindow({\n            height: 200,\n            width: 200,\n            transparent: true,\n            frame: false,\n            icon: node_path_1.default.join(__dirname, \"../renderer/icon.png\"),\n            alwaysOnTop: true,\n            maximizable: false,\n            fullscreenable: false,\n            title,\n            webPreferences: {\n                devTools: true,\n                preload: node_path_1.default.join(__dirname, \"../renderer/preload.js\")\n            }\n        });\n        if (application_1.Application) {\n            this.browserWindow.webContents.openDevTools({\n                mode: \"detach\",\n                title: `${title} Debugger`\n            });\n        }\n        this.browserWindow.setAspectRatio(1);\n        this.browserWindow.loadFile(\"./dist/renderer/index.html\");\n        this.browserWindow.webContents.once(\"did-finish-load\", () => {\n            this.loaded = true;\n        });\n        this.browserWindow.on(\"will-resize\", this.conditionalPreventResize);\n        this.makeDraggable();\n        TimerWindow.GlobalKeyboardListener.addListener(this.forwardGlobalKeyPress);\n    }\n    get id() {\n        return this.browserWindow.webContents.id;\n    }\n    conditionalPreventResize = (event) => {\n        if (!this.resizeable) {\n            event.preventDefault();\n        }\n    };\n    makeDraggable() {\n        let dragging = false;\n        this.browserWindow.hookWindowMessage(TimerWindow.WM_LBUTTONUP, () => {\n            dragging = false;\n        });\n        this.browserWindow.hookWindowMessage(TimerWindow.WM_MOUSEMOVE, (wParam, lParam) => {\n            if (!this.browserWindow) {\n                return;\n            }\n            const wParamNumber = wParam.readInt16LE(0);\n            const leftMousePressed = wParamNumber & TimerWindow.MK_LBUTTON;\n            if (!leftMousePressed) {\n                return;\n            }\n            const x = lParam.readInt16LE(0);\n            const y = lParam.readInt16LE(2);\n            const bounds = this.browserWindow.getBounds();\n            if (!dragging) {\n                dragging = true;\n                this.dragPosition.x = x;\n                this.dragPosition.y = y;\n                this.dragPosition.height = bounds.height;\n                this.dragPosition.width = bounds.width;\n                return;\n            }\n            const currentPosition = this.browserWindow.getPosition();\n            this.browserWindow.setBounds({\n                x: x + currentPosition[0] - this.dragPosition.x,\n                y: y + currentPosition[1] - this.dragPosition.y,\n                height: this.dragPosition.height,\n                width: this.dragPosition.width\n            });\n        });\n    }\n    forwardGlobalKeyPress = ({ name, state }) => {\n        if (!this.loaded) {\n            return;\n        }\n        this.browserWindow.webContents.send(constants_1.EventName.KEY_PRESS, {\n            key: name,\n            state\n        });\n    };\n}\nexports.TimerWindow = TimerWindow;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Application = void 0;\nclass Application {\n    static debug = process.argv.includes(\"--with-dev-tools\");\n}\nexports.Application = Application;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EventName = exports.minute = exports.second = void 0;\nexports.second = 1000;\nexports.minute = exports.second * 60;\nvar EventName;\n(function (EventName) {\n    EventName[\"KEY_PRESS\"] = \"keypress\";\n    EventName[\"SHOW_CONTEXT_MENU\"] = \"showcontextmenu\";\n})(EventName || (exports.EventName = EventName = {}));\n","module.exports = require(\"node-global-key-listener\");","module.exports = require(\"child_process\");","module.exports = require(\"electron\");","module.exports = require(\"fs\");","module.exports = require(\"net\");","module.exports = require(\"node:fs/promises\");","module.exports = require(\"node:path\");","module.exports = require(\"path\");","module.exports = require(\"tty\");","module.exports = require(\"util\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/main/index.ts\");\n",""],"names":[],"sourceRoot":""}